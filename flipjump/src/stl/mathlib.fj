// Every line is (advanced math) bananas!
// Implementation of advanced math operation over bit-vectors

// should be assembled with both bitlib.fj and runlib.fj files
// This file is independent of the bit-width, and uses the consts defined at runlib.fj

// Everything after // is ignored, and every whitespace is ignored (besides new line)
// An opcode is:  F;J  F;  ;J  or just  ;  (no F => F=0;  no J => J=next)

// Complexity note: phi is log2 of the total number of fj operations, counting wflips as one op.
// so 2 wflips with value=label (while label is padded with 2^n) causes phi-n space/time complexity

// The complexities are not updated in this file (should be lower/faster).



// ---------- Multiply:


ns bit {
    // Complexity n(14phi+48)
    def mul10 n, x @ twice, end {
        .shl n, x
        .mov n, twice, x
        .shl n, 2, x
        .add n, x, twice
        ;end

      twice:
        .vec n
      end:
    }


    // dst, src = src/10, src%10.
    // Complexity: n(5phi+23)
    def div10 n, dst, src @ zero, end {
        .zero n, dst
        ._.cmp_sub_10 zero, src+(n-4)*dw, dst+(n-4)*dw
        rep(n-4, i) ._.cmp_sub_10 src+(n-1-i)*dw, src+(n-5-i)*dw, dst+(n-5-i)*dw
        ;end
      zero: bit 0
      end:
    }
    ns _ {
        // if (val > 10) { val-=10; res=!res; },  (for val4:val[3,2,1,0] of length 5, and val <= 18).
        // Complexity: 4phi+21
        def cmp_sub_10 val4, val, res @ yes, no, _1xxxx, _1xx0x, _1xx1x, _01x1x {
            ..if1 val4, _1xxxx
            ..if0 val+3*dw, no
            ..if1 val+  dw, _01x1x
            ..if0 val+2*dw, no

            ..not val+2*dw
            ..not val+3*dw
            ;yes

          _01x1x:
            ..not val+3*dw
            ;yes

          _1xxxx:
            ..not val4
            ..if val+dw, _1xx0x, _1xx1x
          _1xx0x:
            ..not val+2*dw
            ;yes
          _1xx1x:
            ..not val+3*dw
            ;yes

          yes:
            ..not val+dw
            ..not res
          no:
        }
    }


    // Complexity (b is the number of 1-bits in src):  n^2(6phi+18) + n*b(8phi+33)
    // Space Complexity:  ~O(90n)
    def mul_loop n, dst, src @ start, after_add, src_copy, res, end {
        .zero n, res
        .mov n, src_copy, src

      start:
        .if0 src, after_add
        .add n, res, dst          //Comp: n(8phi+33)
      after_add:
        .shl n, dst               //Comp: n(2phi+5)
        .shr n, src               //Comp: n(2phi+5)
        .if0 n, dst, end          //Comp: n(phi+4)
        .if0 n, src, end          //Comp: n(phi+4)
        ;start

      src_copy:
        .vec n
      res:
        .vec n
      end:
        .mov n, src, src_copy
        .mov n, dst, res
    }


    // Complexity (b is the number of 1-bits in src):  n*b(8phi+33)
    // Space Complexity:  ~O(40n^2)
    def mul n, dst, src @ shifted_src, res, end {
        .zero n, res
        .zero n, shifted_src
        .mov n, shifted_src+dw*n, src
        rep(n, i) _.mul_add_if n, dst+i*dw, res, shifted_src+(n-i)*dw
        .mov n, dst, res
        ;end

      shifted_src:
        .vec 2*n
      res:
        .vec n
      end:
    }
    ns _ {
        def mul_add_if n, flag, dst, src @ end {
            ..if0 flag, end
            ..add n, dst, src
          end:
        }
    }
}



ns hex {
    //  Time Complexity: 5phi+32
    // Space Complexity: 4phi+96
    // .mul.add_carry_dst : res   +=   x * .mul.dst + .mul.add_carry_dst
    def add_mul res, x @ ret < .mul.dst, .add.dst, .mul.ret, ._.res {
        .xor .mul.dst+4, x
        .xor .add.dst, res
        wflip .mul.ret+w, ret, .mul.dst
      ret:  // meanwhile - make phi+28 fj ops there
        wflip .mul.ret+w, ret
        .xor_zero res, ._.res
    }

    //  Time Complexity: n(5phi+32)
    // Space Complexity: n(4phi+96)
    // res[n] += a[n] * b[1]
    def add_mul n, res, a, b < .mul.dst {
        .mul.clear_carry
        .xor .mul.dst, b
        rep(n, i) .add_mul res+i*dw, a+i*dw
        .xor .mul.dst, b
        .mul.clear_carry
    }

    //  Time Complexity: n(n(3phi+8) + b(5phi+32)), for b the minimum of #on-bits in a,b (b<n/2, e.g. for n=16, b=7).
    //     (for n==b/2): n^2(5.5phi+24)
    // Space Complexity: n(#n(0.75phi+12) + 18.5phi+636)
    // res[n] = a[n] * b[n]
    def mul n, res, a, b @ a_less_1bits, b_less_1bits, loop, after_add, dst, src, a_1bits, b_1bits, end {
        .zero n, dst
        .zero n, src
        .zero n, res

        // if a has less 1 bits - jump to a_less_1bits. else jump to b_less_1bits
        .count_bits n, a_1bits, a
        .count_bits n, b_1bits, b
        .cmp ((#(n*4))+3)/4, a, b, a_less_1bits, a_less_1bits, b_less_1bits

        a_less_1bits:
        .xor n, dst, b
        .xor n, src, a
        ;loop

        b_less_1bits:
        .xor n, dst, a
        .xor n, src, b


      loop:
        .if0 src, after_add
        .add_mul n, res, dst, src
      after_add:
        .shl_hex n, dst
        .shr_hex n, src
        .if  n, src, end, loop      // can be replaced with #n-sized index decrement and check.


      dst: hex.vec n
      src: hex.vec n
      a_1bits: hex.vec ((#(n*4))+3)/4
      b_1bits: hex.vec ((#(n*4))+3)/4
      end:
    }

    ns mul {
        // Complexity: 3phi+3
        def clear_carry @ return < .ret, .add_carry_dst {
            ..add.clear_carry
            wflip .ret+w, return
            .add_carry_dst+dbit+9; .add_carry_dst
          return:
            wflip .ret+w, return
        }

        // Space Complexity: 1600
        def init @ add_res, after_add,   switch_small_table, add_carry_small_table, set_carry_small_table, clean_small_table,   switch, set_carry_0, set_carry_1, clean,   add_carry, clean_add, clean_carry,   end < ..add.dst, .._.ret > ret, dst, add_carry_dst {
            // general progression (after jumping to hex.mul.dst with value d):
            //  dst           -> switch+d           (set lower4  mul result in add_carry_dst+4)                                                                     (5)
            //  add_carry_dst -> add_carry+?        (set         add result in hex.add.dst  +4. sets dst to set_carry_{0/1}. sets add_carry_dst to clean_add)       (6)
            //  add_carry_dst -> clean_add+?        (clears the all 8 bits of add_carry_dst.    sets add_carry_dst back to add_carry)                               (9)
            //  dst           -> set_carry_{0/1}+d  (set higher4 mul result in add_carry_dst+0. sets dst to clean)                                                  (5)
            //  add_res       -> dst-table+??       (set         add result in hex._.res    +0)                                                                     (phi-4)
            //  dst           -> clean+d            (clears the higher4 bits of dst.            sets dst back to switch)                                            (6)
            //  hex.mul.ret   -> ...                                                                                                                                (1)


            ;end

          ret: ;0
          dst: ;switch

          add_carry_dst: ;add_carry   // the 4-bit carry is in the lower 4bits in here


          add_res:
            wflip .._.ret+w, after_add, ..add.dst
            pad 16
          after_add:
            wflip .._.ret+w, after_add, .dst


            pad 16  // not really needed
          switch_small_table:
            rep(16, d) fj    (d==0)?0: (.add_carry_dst+dbit+(#d)+3),             (d==((1<<(#d))>>1)) ? .add_carry_dst  : switch_small_table   +(d^((1<<(#d))>>1))*dw
          set_carry_small_table:
            rep(16, d) fj    (d==0)?0: (.add_carry_dst+dbit+(#d)-1),             (d==((1<<(#d))>>1)) ? add_res         : set_carry_small_table+(d^((1<<(#d))>>1))*dw
          add_carry_small_table:
            rep(16, d) fj    (d==0) ? .add_carry_dst+dbit+8 : (..add.dst+dbit+(#d)+3),        (d==0) ? .add_carry_dst  : add_carry_small_table+(d^((1<<(#d))>>1))*dw
          clean_small_table:
            rep(16, d) fj    (d==0) ? .dst+dbit+9           : (     .dst+dbit+(#d)+3),        (d==0) ? .ret            : clean_small_table    +(d^((1<<(#d))>>1))*dw


            pad 1024
          switch:
            rep(256, d) fj              0,    switch_small_table    + (((d&0xf)*(d>>4)) & 0xf) * dw
          set_carry_0:
            rep(256, d) fj    .dst+dbit+9,    set_carry_small_table +  (((d&0xf)*(d>>4)) >> 4) * dw
          set_carry_1:
            rep(256, d) fj    .dst+dbit+8,    set_carry_small_table + ((((d&0xf)*(d>>4)) >> 4)+1) * dw
          clean:
            rep(256, d) fj    .dst+dbit+8,    clean_small_table     +    (d>>4) * dw


          // needs to be 1024-padded
          add_carry:
            rep(256, d) fj    .dst+dbit + (((d&0xf)+(d>>4) > 0xf) ? 9 : 8),    add_carry_small_table + (((d&0xf)+(d>>4)) & 0xf) * dw
          clean_add:
            rep(256, d) fj    (d==0) ? .add_carry_dst+dbit+8 : (.add_carry_dst+dbit+(#d)-1),    (d==0) ? .dst : clean_add  +(d^((1<<(#d))>>1))*dw
          clean_carry:
            rep( 16, d) fj    (d==0) ? .add_carry_dst+dbit+9 : (.add_carry_dst+dbit+(#d)-1),    (d==0) ? .dst : clean_carry+(d^((1<<(#d))>>1))*dw


          end:
        }
    }
}


// ---------- Divide:


ns bit {
    def idiv n, a, b, q, r @ negative_a, negative_b, one_negative, neg_b_1, do_div, neg_b_2, neg_ans, end {
        .mov negative_a, a+dw*(n-1)
        .mov negative_b, b+dw*(n-1)
        .zero one_negative

        .if0 negative_a, neg_b_1
        .not one_negative
        .neg n, a
      neg_b_1:
        .if0 negative_b, do_div
        .not one_negative
        .neg n, b
      do_div:
        .div n, a, b, q, r

        .if0 negative_a, neg_b_2
        .neg n, a
        .neg n, r
      neg_b_2:
        .if0 negative_b, neg_ans
        .neg n, b
      neg_ans:
        .if0 one_negative, end
        .neg n, q
        ;end

      negative_a:
        bit
      negative_b:
        bit
      one_negative:
        bit
      end:
    }


    // Complexity: n^2(10phi+43)
    // Space Complexity:  ~O(50n^2)
    def div n, a, b, q, r @ Q, R, end {
        .if0 n, b, end
        .zero 2*n, R
        .zero   n, Q

        rep(n, i) _.div_step n, a+(n-1-i)*dw, b, R+(n-1-i)*dw, Q+(n-1-i)*dw

        .mov n, r, R
        .mov n, q, Q
        ;end

      R:
        .vec 2*n
      Q:
        var   n
      end:
    }
    ns _ {
        def div_step n, N, D, R, Q @ do_sub, end {
            ..xor R, N
            ..cmp n, R, D, end, do_sub, do_sub
          do_sub:
            ..sub n, R, D
            ..not Q
          end:
        }
    }



    def idiv_loop n, a, b, q, r @ negative_a, negative_b, one_negative, neg_b_1, do_div, neg_b_2, neg_ans, end {
        .mov negative_a, a+dw*(n-1)
        .mov negative_b, b+dw*(n-1)
        .zero one_negative

        .if0 negative_a, neg_b_1
        .not one_negative
        .neg n, a
      neg_b_1:
        .if0 negative_b, do_div
        .not one_negative
        .neg n, b
      do_div:
        .div_loop n, a, b, q, r

        .if0 negative_a, neg_b_2
        .neg n, a
        .neg n, r
      neg_b_2:
        .if0 negative_b, neg_ans
        .neg n, b
      neg_ans:
        .if0 one_negative, end
        .neg n, q
        ;end

      negative_a:
        bit
      negative_b:
        bit
      one_negative:
        bit
      end:
    }


    // Complexity: n^2(18phi+64)
    // Space Complexity:  ~O(120n)
    def div_loop n, a, b, q, r @ loop, do_sub, loop_end, after_loop, A, Q, R, i, end {
        .if0 n, b, end
        .zero n, R
        .zero n, Q
        .mov n, A, a
        .zero n, i
        .not i+(n-1)*dw

      loop:
        .if0 n, i, after_loop                 //Comp: n(phi+4)
        .shl n, R                            //Comp: n(2phi+5)
        .xor R, A+(n-1)*dw
        .cmp n, R, b, loop_end, do_sub, do_sub   //Comp: n(2phi+8)
      do_sub:
        .sub n, R, b                          //Comp: n(8phi+35)
        .xor n, Q, i                          //Comp: n(phi+2)
      loop_end:
        .shr n, i                            //Comp: n(2phi+5)
        .shl n, A                            //Comp: n(2phi+5)
        ;loop

      after_loop:
        .mov n, r, R
        .mov n, q, Q
        ;end

      A:
        .vec n
      R:
        .vec n
      Q:
        .vec n
      i:
        .vec n

      end:
    }
}


ns hex {
    def div n, nb, q, _r, _a, _b, div0 @ loop, after_loop,   do_cmp_sub_func, do_sub, jump_to_flip, flip_op,   r, b, a, i, ret,   end {
        .if0 nb, _b, div0

        .zero q
        .zero nb+1, r

        .mov nb, b, _b
        .mov  n, a, _a

        .set #n, i, n-1

      loop:
        .shl_hex nb+1, b

        .shl_hex n, r
        .xor r, a+(n-1)*dw

        fcall do_cmp_sub_func, ret
        jump_to_flip+dbit+0;
        fcall do_cmp_sub_func, ret
        jump_to_flip+dbit+1;
        fcall do_cmp_sub_func, ret
        jump_to_flip+dbit+0;
        fcall do_cmp_sub_func, ret
        jump_to_flip+dbit+1;

        .shl_hex n, a
        .shl_hex n, q

        .dec #n, i
        .sign #n, i, after_loop, loop

      do_cmp_sub_func:
        hex.shr_bit nb+1, b
        hex.cmp nb+1, r, b, ret, do_sub, do_sub
      do_sub:
        hex.sub nb+1, r, b

      jump_to_flip:
        ;flip_op
        pad 4
      flip_op:
        q+dbit+0; ret
        q+dbit+1; ret
        q+dbit+3; ret
        q+dbit+2; ret

      r:  .vec nb+1
      b:  .vec nb+1
      a:  .vec n
      i:  .vec #n
      ret: ;0

      after_loop:
        .mov nb, _r, r
      end:
    }
}

