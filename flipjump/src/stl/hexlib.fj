// Every line is (16) bananas!
// Implementation of hexadecimal-variables operations, and vectors of it

// should be assembled with the runlib.fj file
// This file is independent of the bit-width, and uses the consts defined at runlib.fj

// Everything after // is ignored, and every whitespace is ignored (besides new line)
// An opcode is:  F;J  F;  ;J  or just  ;  (no F => F=0;  no J => J=next)

// Complexity note: phi is log2 of the total number of fj operations, counting wflips as one op.
// so 2 wflips with value=label (while label is padded with 2^n) causes phi-n space/time complexity

// Space complexity might not be exact



// ---------- Memory Variables:
// Size Complexity: 1


def hex val {
    ;(val > 0xf ? 0xf : (val < 0 ? 0 : val)) * dw
}

def hex {
    hex 0
}


ns hex {
    def vec n, value {
        rep(n, i) hex (value>>(4*i))&0xf
    }

    def vec n {
        rep(n, i) hex
    }
}


// ---------- Logical Macros:


ns hex {

    //  Time Complexity: phi
    // Space Complexity: phi+27
    def xor dst, src {
        .exact_xor dst+dbit+3, dst+dbit+2, dst+dbit+1, dst+dbit+0, src
    }

    //  Time Complexity: n*phi
    // Space Complexity: n*(phi+26)
    def xor n, dst, src {
        rep (n, i) .xor dst+i*dw, src+i*dw
    }


    //  Time Complexity: phi
    // Space Complexity: phi+27
    def exact_xor d3, d2, d1, d0, src @ switch, end {
        wflip src+w, switch, src
        pad 16
      switch:
          ;end          //  0
        d0;end          //  1
        d1;end          //  2
        d1;switch+1*dw  //  3
        d2;end          //  4
        d2;switch+1*dw  //  5
        d2;switch+2*dw  //  6
        d2;switch+3*dw  //  7
        d3;end          //  8
        d3;switch+1*dw  //  9
        d3;switch+2*dw  // 10
        d3;switch+3*dw  // 11
        d3;switch+4*dw  // 12
        d3;switch+5*dw  // 13
        d3;switch+6*dw  // 14
        d3;switch+7*dw  // 15
      end:
        wflip src+w, switch
    }

    //  Time Complexity: phi+4
    // Space Complexity: phi+42
    def xor_zero dst, src {
        .double_xor dst, src, src
    }

    //  Time Complexity: n(phi+4)
    // Space Complexity: n(phi+42)
    def xor_zero n, dst, src {
        rep (n, i) .xor_zero dst+i*dw, src+i*dw
    }

    //  Time Complexity: phi+4
    // Space Complexity: phi+42
    def double_xor dst1, dst2, src {
        .double_exact_xor dst1+dbit+3, dst1+dbit+2, dst1+dbit+1, dst1+dbit+0, dst2+dbit+3, dst2+dbit+2, dst2+dbit+1, dst2+dbit+0, src
    }

    //  Time Complexity: phi+4
    // Space Complexity: phi+42
    def double_exact_xor t3, t2, t1, t0, d3, d2, d1, d0, src @ switch, second_flip, end {
        wflip src+w, switch, src
        pad 16
      switch:
          ;end                  //  0
        d0;second_flip+ 0*dw    //  1
        d1;second_flip+ 1*dw    //  2
        d1;second_flip+ 2*dw    //  3
        d2;second_flip+ 3*dw    //  4
        d2;second_flip+ 4*dw    //  5
        d2;second_flip+ 5*dw    //  6
        d2;second_flip+ 6*dw    //  7
        d3;second_flip+ 7*dw    //  8
        d3;second_flip+ 8*dw    //  9
        d3;second_flip+ 9*dw    // 10
        d3;second_flip+10*dw    // 11
        d3;second_flip+11*dw    // 12
        d3;second_flip+12*dw    // 13
        d3;second_flip+13*dw    // 14
        d3;second_flip+14*dw    // 15

      second_flip:
        t0;end          //  1
        t1;end          //  2
        t1;switch+1*dw  //  3
        t2;end          //  4
        t2;switch+1*dw  //  5
        t2;switch+2*dw  //  6
        t2;switch+3*dw  //  7
        t3;end          //  8
        t3;switch+1*dw  //  9
        t3;switch+2*dw  // 10
        t3;switch+3*dw  // 11
        t3;switch+4*dw  // 12
        t3;switch+5*dw  // 13
        t3;switch+6*dw  // 14
        t3;switch+7*dw  // 15
      end:
        wflip src+w, switch
    }


    // Complexity: 4
    def not hex {
        hex+dbit+0;
        hex+dbit+1;
        hex+dbit+2;
        hex+dbit+3;
    }

    // Complexity: 4n
    def not n, hex {
        rep(n, i) .not hex+i*dw
    }
    
    
    //  Time Complexity: 4phi+16
    // Space Complexity: 4phi+96
    def or dst, src < .or.dst {
        ._.table_query dst, src, .or.dst
    }
    
    //  Time Complexity: n(4phi+17)
    // Space Complexity: n(4phi+96)
    def or n, dst, src {
        rep(n, i) .or dst+i*dw, src+i*dw
    }

    ns or {
        // Space Complexity: 600
        def init @ switch, clean, end < .._.res, .._.ret > dst {
            ;end
          dst: ;.switch

            pad 256
          switch:
            rep(256, d) wflip_macro .._.res+w, (((d&0xf)|(d>>4))^(d&0xf))*dw, clean+d*dw
          
          clean:
            .._.clean_table .dst
          end:
        }
    }
    
    
    //  Time Complexity: 4phi+16
    // Space Complexity: 4phi+96
    def and dst, src < .and.dst {
        ._.table_query dst, src, .and.dst
    }
    
    //  Time Complexity: n(4phi+17)
    // Space Complexity: n(4phi+96)
    def and n, dst, src {
        rep(n, i) .and dst+i*dw, src+i*dw
    }

    ns and {
        // Space Complexity: 600
        def init @ switch, clean, end < .._.res, .._.ret > dst {
            ;end
          dst: ;.switch

            pad 256
          switch:
            rep(256, d) wflip_macro .._.res+w, (((d&0xf)&(d>>4))^(d&0xf))*dw, clean+d*dw
          
          clean:
            .._.clean_table .dst
          end:
        }
    }


    //  Time Complexity: 2.13phi+2
    // Space Complexity: n(1.5phi+23) + 2phi+121  (+padding)
    // dst[n] += x.#on-bits
    def add_count_bits n, dst, x @ count_switch,  do_add,  add_switch, add4_switch,  xor_switch,  after_add, is_carry,  should_inc, do_inc,  clean {
        wflip x+w, count_switch, x

        pad 16
      count_switch:
        ;clean              //  0
        ;do_add
        ;do_add
        dst+dbit+4;do_add
        ;do_add             //  4
        dst+dbit+4;do_add
        dst+dbit+4;do_add
        dst+dbit+5;do_add
        ;do_add             //  8
        dst+dbit+4;do_add
        dst+dbit+4;do_add
        dst+dbit+5;do_add
        dst+dbit+4;do_add   // 12
        dst+dbit+5;do_add
        dst+dbit+5;do_add
        dst+dbit+5;count_switch+3*dw

      do_add:
        wflip dst+w, add_switch, dst

        pad 64
      add_switch:
        rep(16, d) fj             0,    xor_switch+(d^(d+1))*dw
        rep(16, d) fj    dst+dbit+4,    xor_switch+(d^(d+2))*dw
        rep(16, d) fj    dst+dbit+5,    xor_switch+(d^(d+3))*dw
        rep(16, d) fj    dst+dbit+5,    add4_switch+d*dw
      add4_switch:
        rep(16, d) fj    dst+dbit+4,    xor_switch+(d^(d+4))*dw

        pad 32
      xor_switch:
        ._.clean_table 16, dst, after_add
        rep(16, i) fj    is_carry+dbit,    xor_switch+i*dw

      after_add:
        wflip dst+w, add_switch, is_carry
      is_carry: ;should_inc
        pad 2
      should_inc:
        ;clean
        is_carry+dbit;do_inc
      do_inc:
        .inc n-1, dst+dw
        ;clean

      clean:
        wflip x+w, count_switch
    }

    //  Time Complexity: n(2.13phi+2)
    // Space Complexity: n(#n(0.4phi+6) + 2phi+121)
    def count_bits n, dst, x {
        .zero ((#(n*4))+3)/4, dst
        rep(n, i) .add_count_bits ((#(n*4))+3)/4, dst, x+i*dw
    }


    //  Time Complexity: phi+1
    // Space Complexity: phi+28
    def shl_bit_once dst, next @ switch, xor_by, end {
        wflip dst+w, switch, dst

        pad 16
      switch:
        rep(16, i) fj    i&8 ? next+dbit+0 : 0,  xor_by+(i^((i<<1)&0xf))*dw
      xor_by:
        ._.clean_table 16, dst, end

      end:
        wflip dst+w, switch
    }

    //  Time Complexity: n(phi+1)
    // Space Complexity: n(phi+28)
    def shl_bit n, dst {
        .shl_bit_once dst+(n-1)*dw, 0
        rep(n-1, i) .shl_bit_once dst+(n-2-i)*dw, dst+(n-1-i)*dw
    }


    //  Time Complexity: phi+1
    // Space Complexity: phi+28
    def shr_bit_once dst, next @ switch, xor_by, end {
        wflip dst+w, switch, dst

        pad 16
      switch:
        rep(16, i) fj    i&1 ? next+dbit+3 : 0,  xor_by+(i^((i>>1)&0xf))*dw
      xor_by:
        ._.clean_table 16, dst, end

      end:
        wflip dst+w, switch
    }

    //  Time Complexity: n(phi+1)
    // Space Complexity: n(phi+28)
    def shr_bit n, dst {
        .shr_bit_once dst, 0
        rep(n-1, i) .shr_bit_once dst+(i+1)*dw, dst+i*dw
    }


    //  Time Complexity: n(phi+4)
    // Space Complexity: n(phi+42)
    // shift left by 4bits (1hex)
    def shl_hex n, dst {
        .zero dst+(n-1)*dw
        rep(n-1, i) .xor_zero dst+(n-1-i)*dw, dst+(n-2-i)*dw
    }


    //  Time Complexity: n(phi+4)
    // Space Complexity: n(phi+42)
    // shift right by 4bits (1hex)
    def shr_hex n, dst {
        .zero dst
        rep(n-1, i) .xor_zero dst+i*dw, dst+(i+1)*dw
    }
}



// ---------- Arithmetical Macros
// carry is both input and output, and is saved in the 8th bit in hex.{add/sub}.dst


ns hex {
    //  Time Complexity: phi
    // Space Complexity: 1.5phi+28
    def inc1 hex, carry0, carry1 @ switch, end {
        wflip hex+w, switch, hex
        pad 16
      switch:
        hex+dbit+0;end          //  0
        hex+dbit+1;switch+0*dw  //  1
        hex+dbit+0;end          //  2
        hex+dbit+2;switch+1*dw  //  3
        hex+dbit+0;end          //  4
        hex+dbit+1;switch+0*dw  //  5
        hex+dbit+0;end          //  6
        hex+dbit+3;switch+3*dw  //  7
        hex+dbit+0;end          //  8
        hex+dbit+1;switch+0*dw  //  9
        hex+dbit+0;end          // 10
        hex+dbit+2;switch+1*dw  // 11
        hex+dbit+0;end          // 12
        hex+dbit+1;switch+0*dw  // 13
        hex+dbit+0;end          // 14
        hex+dbit+3;             // 15
        hex+dbit+2;
        hex+dbit+1;
        hex+dbit+0;
        wflip hex+w, switch, carry1
      end:
        wflip hex+w, switch, carry0
    }

    //  Time Complexity: 16/15*phi
    // Space Complexity: n(1.5phi+23)
    def inc n, hex @ end {
        rep(n, i) .inc.step hex+i*dw, end
      end:
    }
    ns inc {
        def step hex, end @ next {
            ..inc1 hex, end, next
          next:
        }
    }


    //  Time Complexity: phi
    // Space Complexity: 1.5phi+28
    def dec1 hex, borrow0, borrow1 @ switch, borrow, end {
        wflip hex+w, switch, hex
        pad 16
      switch:
        hex+dbit+3;borrow       //  0
        hex+dbit+0;end          //  1
        hex+dbit+1;switch+1*dw  //  2
        hex+dbit+0;end          //  3
        hex+dbit+2;switch+2*dw  //  4
        hex+dbit+0;end          //  5
        hex+dbit+1;switch+1*dw  //  6
        hex+dbit+0;end          //  7
        hex+dbit+3;switch+4*dw  //  8
        hex+dbit+0;end          //  9
        hex+dbit+1;switch+1*dw  // 10
        hex+dbit+0;end          // 11
        hex+dbit+2;switch+2*dw  // 12
        hex+dbit+0;end          // 13
        hex+dbit+1;switch+1*dw  // 14
        hex+dbit+0;end          // 15
      borrow:
        hex+dbit+2;
        hex+dbit+1;
        hex+dbit+0;
        wflip hex+w, switch, borrow1
      end:
        wflip hex+w, switch, borrow0
    }

    //  Time Complexity: n*phi
    // Space Complexity: n(1.5phi+23)
    def dec n, hex @ end {
        rep(n, i) .dec.step hex+i*dw, end
      end:
    }
    ns dec {
        def step hex, end @ next {
            ..dec1 hex, end, next
          next:
        }
    }


    //  Time Complexity: 4n
    // Space Complexity: n(1.5phi+27)
    def neg n, hex {
        .not n, hex
        .inc n, hex
    }


    //  Time Complexity: 4phi+17
    // Space Complexity: 4phi+96
    def add dst, src < .add.dst {
        ._.table_query dst, src, .add.dst
    }

    //  Time Complexity: n(4phi+17)
    // Space Complexity: n(4phi+96)
    def add n, dst, src {
        .add.clear_carry
        rep(n, i) .add dst+i*dw, src+i*dw
        .add.clear_carry
    }

    ns add {
        //  Time Complexity: 2phi+2
        // Space Complexity: 2phi+27
        def clear_carry @ ret < .._.ret, .dst, .._.res {
            wflip .._.ret+w, ret, .dst
          ret:
            wflip .._.ret+w, ret
            ..zero .._.res
        }

        //  Time Complexity: 2phi+3
        // Space Complexity: 2.5phi+26
        def clear_carry c0, c1 @ ret < .._.ret, .dst, .._.res {
            wflip .._.ret+w, ret, .dst
          ret:
            wflip .._.ret+w, ret
            ..if0 .._.res, c0
            .._.res+dbit; c1
        }

        // Complexity: 1
        def not_carry < .dst {
            .dst+dbit+8;
        }

        //  Time Complexity: 2phi+3
        // Space Complexity: 2phi+28
        def set_carry {
            .clear_carry
            .not_carry
        }

        // Space Complexity: 1800
        def init @ switch0, switch1, flip_carry, clean, end < .._.res, .._.ret > dst {
            ;end
          dst: ;.switch0

            pad 512
          switch0:
            rep(256, d) wflip_macro .._.res+w, ((((d&0xf)+(d>>4)  )&0xf)^(d&0xf))*dw, (((d&0xf)+(d>>4)   > 0xf) ? (flip_carry+d*dw) : (clean+d*dw))
          switch1:
            rep(256, d) wflip_macro .._.res+w, ((((d&0xf)+(d>>4)+1)&0xf)^(d&0xf))*dw, (((d&0xf)+(d>>4)+1 > 0xf) ? (clean+d*dw) : (flip_carry+d*dw))

          flip_carry:
            rep(256, i) fj .dst+dbit+8, clean+i*dw
          clean:
            .._.clean_table .dst
          end:
        }
    }
    
    
    //  Time Complexity: 4phi+17
    // Space Complexity: 4phi+96
    def sub dst, src < .sub.dst {
        ._.table_query dst, src, .sub.dst
    }

    //  Time Complexity: n(4phi+17)
    // Space Complexity: n(4phi+96)
    def sub n, dst, src {
        .sub.clear_carry
        rep(n, i) .sub dst+i*dw, src+i*dw
        .sub.clear_carry
    }

    ns sub {
        //  Time Complexity: 2phi+14
        // Space Complexity: 2.5phi+30
        def clear_carry @ end {
            .clear_carry end, end
          end:
        }

        //  Time Complexity: 2phi+14
        // Space Complexity: 2.5phi+30
        def clear_carry c0, c1 @ ret < .._.ret, .dst, .._.res {
            wflip .._.ret+w, ret, .dst
          ret:
            wflip .._.ret+w, ret
            ..if0 .._.res, c0
            .not_carry
            wflip .._.res+w, 0xf*dw, c1
        }

        // Complexity: 1
        def not_carry < .dst {
            .dst+dbit+8;
        }

        //  Time Complexity: 2phi+15
        // Space Complexity: 2.5phi+31
        def set_carry {
            .clear_carry
            .not_carry
        }

        // Space Complexity: 1600
        def init @ switch0, switch1, flip_carry, clean, end < .._.res, .._.ret > dst {
            ;end
          dst: ;.switch0

            pad 512
          switch0:
            rep(256, d) wflip_macro .._.res+w, ((((d&0xf)-(d>>4)  )&0xf)^(d&0xf))*dw, (((d&0xf)-(d>>4)   < 0) ? (flip_carry+d*dw) : (clean+d*dw))
          switch1:
            rep(256, d) wflip_macro .._.res+w, ((((d&0xf)-(d>>4)-1)&0xf)^(d&0xf))*dw, (((d&0xf)-(d>>4)-1 < 0) ? (clean+d*dw) : (flip_carry+d*dw))

          flip_carry:
            rep(256, i) fj .dst+dbit+8, clean+i*dw
          clean:
            .._.clean_table .dst
          end:
        }
    }
}



// ---------- Memory Manipulation:


ns hex {

    //  Time Complexity: phi
    // Space Complexity: phi+27
    def zero x {
        .xor x, x
    }

    //  Time Complexity: n*phi
    // Space Complexity: n*(phi+26)
    def zero n, x {
        rep (n, i) .zero x+i*dw
    }

    //  Time Complexity: 2phi+1
    // Space Complexity: phi+54
    def mov dst, src @ end {
        comp_if1 dst==src, end
        .zero dst
        .xor dst, src
      end:
    }

    //  Time Complexity: n*(2phi+1)
    // Space Complexity: n*(phi+52)
    def mov n, dst, src {
        rep(n, i) .mov dst+i*dw, src+i*dw
    }

    // Complexity: 4 (avg. 2. #on-bits)
    def xor_by hex, val {
        wflip hex+w, (val > 0xf ? 0xf : (val < 0 ? 0 : val)) * dw
    }

    // Complexity: 4n (#on-bits)
    def xor_by n, hex, val {
        rep(n, i) .xor_by hex+i*dw, (val>>(4*i))&0xf
    }

    //  Time Complexity: phi+4
    // Space Complexity: phi+31
    def set hex, val {
        .zero hex
        .xor_by hex, val
    }

    def set n, hex, val {
        rep(n, i) .set hex+i*dw, (val>>(4*i))&0xf
    }

    //  Time Complexity: 3phi
    // Space Complexity: 3phi+79
    def swap hex1, hex2 @ end {
        comp_if1 hex1==hex2, end
        .xor hex1, hex2
        .xor hex2, hex1
        .xor hex1, hex2
      end:
    }

    //  Time Complexity: n*(3phi)
    // Space Complexity: n*(3phi+78)
    def swap n, hex1, hex2 {
        rep(n, i) .swap hex1+i*dw, hex2+i*dw
    }
}



// ---------- Conditional Jump


ns hex {
    //  Time Complexity: phi-1
    // Space Complexity: phi+15
    def if_flags hex, flags, l0, l1 @ switch, clean, return, finish {
        wflip hex+w, switch, hex

        pad 16
      switch:
        rep(16, i) fj    (flags>>i)&1 ? return+dbit+0 : 0,    clean

      clean:
        wflip hex+w, switch
      return: ;finish
        pad 2
      finish:
                     ; l0
        return+dbit+0; l1
    }

    //  Time Complexity: phi-1
    // Space Complexity: phi+15
    def if hex, l0, l1 {
        .if_flags hex, 0xfffe, l0, l1
    }
    def if0 hex, l0 @ l1 {
        .if hex, l0, l1
      l1:
    }
    def if1 hex, l1 @ l0 {
        .if hex, l0, l1
      l0:
    }

    //  Time Complexity: n(phi-1)
    // Space Complexity: n(phi+15)
    def if n, hex, l0, l1 {
        rep(n-1, i) .if1 hex+i*dw, l1
        .if hex+(n-1)*dw, l0, l1
    }
    def if0 n, hex, l0 @ l1 {
        .if n, hex, l0, l1
      l1:
    }
    def if1 n, hex, l1 @ l0 {
        .if n, hex, l0, l1
      l0:
    }


    //  Time Complexity: phi-1
    // Space Complexity: phi+15
    def sign n, x, neg, zpos {
        .if_flags x+(n-1)*dw, 0xff00, zpos, neg
    }


    //  Time Complexity: 3phi+12
    // Space Complexity: 3phi+51
    def cmp a, b, lt, eq, gt @ ret, _eq, _gt, real_ret, __lt, __eq, __gt, second_xor < .cmp.dst, ._.ret {
        .xor .cmp.dst, a    // 1
        ;second_xor


        pad 4
      ret:          // 4
        wflip ._.ret+w, ret, real_ret   // 5
        ._.ret+dbit  ;_eq
        ._.ret+dbit+1;_gt

      _eq:  real_ret+dbit  ;ret     // (4.5)
      _gt:  real_ret+dbit+1;ret

      real_ret:                     // 6
        ;__lt

        pad 4
      __lt:                 ;lt     // 7 (and last)
      __eq:  real_ret+dbit  ;eq
      __gt:  real_ret+dbit+1;gt


      second_xor:
        .xor .cmp.dst+4, b              // 2
        wflip ._.ret+w, ret, .cmp.dst   // 3
    }

    def cmp n, a, b, lt, eq, gt {
        rep(n-1, i) .cmp.cmp_eq_next a+(n-1-i)*dw, b+(n-1-i)*dw, lt, gt
        .cmp a, b, lt, eq, gt
    }

    ns cmp {
        def cmp_eq_next a, b, lt, gt @ eq {
            ..cmp a, b, lt, eq, gt
          eq:
        }

        // Space Complexity: 500
        def init @ switch, clean, end < .._.ret > dst {
            ;end
          dst: ;.switch

            pad 256
          switch:
            rep(256, d) fj    ((d&0xf) > (d>>4)) ? .._.ret+dbit+1 : (((d&0xf) == (d>>4)) ? .._.ret+dbit : 0),    clean+d*dw

          clean:
            .._.clean_table .dst
          end:
        }
    }
}


ns hex {
    def init {
        ._.init
    }

    ns _ {
        // Space Complexity: 6700
        def init @ end > ret, res {
            ;end
          ret: ;0
          res: hex
          ..cmp.init    // 1600
          ..add.init    // 1800
          ..sub.init    //  500
          ..or.init     //  600
          ..and.init    //  600
          ..mul.init    // 1600
          end:
        }

        // n must be a power of 2
        def clean_table n, dst, ret @ clean {
          clean:
            rep(n, d) fj    d==0?0: (dst+dbit+(#d)-1),    (d==((1<<(#d))>>1)) ? ret : clean+(d^((1<<(#d))>>1))*dw
        }

        // Space Complexity: 256
        def clean_table dst, ret {
            .clean_table 256, dst, ret
        }

        // Space Complexity: 256
        def clean_table dst < .ret {
            .clean_table dst, .ret
        }
        
        def table_query dst, src, dst_switch @ return < .ret, .res {
            ..xor dst_switch  , dst
            ..xor dst_switch+4, src
            wflip .ret+w, return, dst_switch
          return:
            wflip .ret+w ,return
            ..xor_zero dst, .res
        }
    }
}



// ---------- IO


ns hex {
    def output hex @ switch, print_0, print_2, print_4, print_6, print_8, print_a, print_c, print_e, end < IO {
        wflip hex+w, switch, hex
        pad 16
      switch:
        IO+0;print_0    //  0
        IO+1;print_0    //  1
        IO+0;print_2    //  2
        IO+1;print_2    //  3
        IO+0;print_4    //  4
        IO+1;print_4    //  5
        IO+0;print_6    //  6
        IO+1;print_6    //  7
        IO+0;print_8    //  8
        IO+1;print_8    //  9
        IO+0;print_a    //  4
        IO+1;print_a    //  5
        IO+0;print_c    //  6
        IO+1;print_c    //  7
        IO+0;print_e    //  8
        IO+1;print_e    //  9


      print_0:
        IO+0;
        IO+0;
        IO+0;end
      print_2:
        IO+1;print_0+1*dw
      print_4:
        IO+0;
        IO+1;print_0+2*dw
      print_6:
        IO+1;print_4+1*dw
      print_8:
        IO+0;
        IO+0;
        IO+1;end
      print_a:
        IO+1;print_8+1*dw
      print_c:
        IO+0;
        IO+1;print_8+2*dw
      print_e:
        IO+1;print_c+1*dw

      end:
        wflip hex+w, switch
    }


    def print x {
        .output x
        .output x+dw
    }

    def print n, x {
        rep(n, i) .print x+2*i*dw
    }


    //  Time Complexity: phi+4
    // Space Complexity: phi+51  phi-4+15+16+24
    def print_as_digit hex, big_flag @ switch, print_0, print_2, print_4, print_6, print_8, print_a, print_b, print_d, print_f, end < IO {
        wflip hex+w, switch, hex
        pad 16
      switch:
        IO+0;print_0    //  0
        IO+1;print_0    //  1
        IO+0;print_2    //  2
        IO+1;print_2    //  3
        IO+0;print_4    //  4
        IO+1;print_4    //  5
        IO+0;print_6    //  6
        IO+1;print_6    //  7
        IO+0;print_8    //  8
        IO+1;print_8    //  9

        IO+1;print_a    //  a
        IO+0;print_b    //  b
        IO+1;print_b    //  c
        IO+0;print_d    //  d
        IO+1;print_d    //  e
        IO+0;print_f    //  f

      print_0:
        IO+0;
        IO+0;
        IO+0;
        IO+1;
        IO+1;
        IO+0;
        IO+0;end
      print_2:
        IO+1;print_0+1*dw
      print_4:
        IO+0;
        IO+1;print_0+2*dw
      print_6:
        IO+1;print_4+1*dw
      print_8:
        IO+0;
        IO+0;
        IO+1;print_0+3*dw
      print_a:
        IO+0;
        IO+0;
        IO+0;
        IO+0;
        IO+(big_flag ? 0 : 1);
        IO+1;print_0+6*dw
      print_b:
        IO+1;print_a+1*dw
      print_d:
        IO+0;
        IO+1;print_a+2*dw
      print_f:
        IO+1;print_d+1*dw

      end:
        wflip hex+w, switch
    }

    //  Time Complexity: phi+4
    // Space Complexity: phi+42
    def print_as_digit n, x, big_flag {
        rep (n, i) .print_as_digit x+(n-1-i)*dw, big_flag
    }

    //  Time Complexity: n(2phi+8)
    // Space Complexity: n(3.5phi+72)
    def print_uint n, x, x_prefix, big_flag @ after_prefix, printed_something, end {
        bit.zero printed_something
        comp_if0 x_prefix, after_prefix
        output "0x"

      after_prefix:
        rep(n, i) .print_uint.print_digit x+(n-1-i)*dw, printed_something, big_flag
        bit.if1 printed_something, end
        output '0'
        ;end

      printed_something: bit
      end:
    }
    ns print_uint {
        //  Time Complexity: 2phi+8 (once: 3phi+9)
        // Space Complexity: 3.5phi+72
        def print_digit hex, printed_something, big_flag @ print, end {
            bit.if1 printed_something, print
            ..if0 hex, end
            bit.not printed_something
          print:
            ..print_as_digit hex, big_flag
          end:
        }
    }

    //  Time Complexity: n(2phi+16)
    // Space Complexity: n(6.5phi+126)
    def print_int n, x, x_prefix, big_flag @ do_neg, print, neg, end {
        bit.zero neg
        .if_flags x+(n-1)*dw, 0xff00, print, do_neg
      do_neg:
        bit.not neg
        .neg n, x
        output '-'
      print:
        .print_uint n, x, x_prefix, big_flag
        bit.if0 neg, end
        .neg n, x
        ;end

      neg: bit
      end:
    }

    //  Time Complexity: 2phi+7
    // Space Complexity: 2phi+39
    def input_hex hex @ flip0, flip1, flip2, flip3, end < IO {
        .zero hex
        wflip IO+w, flip0, IO

        pad 8
      flip0:
        IO+dbit+1;IO
        hex+dbit+0;flip0
      flip1:
        IO+dbit+2;IO
        hex+dbit+1;flip1
      flip3:
        wflip IO+w, flip3, end
        hex+dbit+3;flip3
      flip2:
        IO+dbit+1;IO
        hex+dbit+2;flip2
      end:
    }

    //  Time Complexity: 4phi+14
    // Space Complexity: 4phi+70
    def input x {
        .input_hex x
        .input_hex x+dw
    }

    //  Time Complexity: n(4phi+14)
    // Space Complexity: n(4phi+70)
    def input n, x {
        rep(n, i) .input x+2*i*dw
    }


    //  Time Complexity: 6phi+14
    // Space Complexity: 9.5phi+168
    def input_as_hex hex, error @ try_dec, do_dec, do_hex, switch, finish_hex, upper, end {
        .input_hex hex
        .input_hex upper
        .if_flags upper, (1<<4)|(1<<6), try_dec, do_hex
      try_dec:
        .if_flags upper, (1<<3), error, do_dec

      do_dec:
        .if_flags hex, (1<<10)-1, error, end

      do_hex:
        wflip hex+w, switch, hex

      finish_hex:
        hex+dbit+3;
        wflip hex+w, switch, end

        pad 16
      switch:
        wflip hex+w, switch, error  //  0
        hex+dbit+1;switch+2*dw      //  1
        hex+dbit+0;finish_hex       //  2
        hex+dbit+2;switch+1*dw      //  3
        hex+dbit+0;finish_hex       //  4
        hex+dbit+1;switch+2*dw      //  5
        hex+dbit+0;finish_hex       //  6
        ;switch                     //  7
        ;switch
        ;switch
        ;switch
        ;switch
        ;switch
        ;switch
        ;switch
        ;switch

      upper: hex
      end:
    }
}
