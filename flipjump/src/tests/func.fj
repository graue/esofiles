startup



// As with the current variables, should print:
// ABC
// AB~CD~EF
// ABCDE
// ABCDEFGH-1
// ABC abcdefg ABCD-0



// Prints "ABC"
test1:
    output 'A'
    bit.call func1
    output 'C'
    output '\n'
    ;test2

func1:
    output 'B'
    bit.return



// Prints "AB~CD~EF"
test2:
    output 'A'
    bit.call func2a
    bit.call func2b
    output 'F'
    output '\n'
    ;test3

func2a:
    output 'B'
    bit.call func2c
    output 'C'
    bit.return
func2b:
    output 'D'
    bit.call func2c
    output 'E'
    bit.return
func2c:
    output '~'
    bit.return



// Prints "ABCDE"
test3:
    output 'A'
    bit.push x3
    output 'B'
    bit.call func3
    output 'D'
    bit.pop x3
    output 'E'
    output '\n'
    ;test4

func3:
    output 'C'
    bit.return



// Prints "ABCDEFGH-" and then 0/1, the invert of x4
test4:
    output 'A'
    bit.push x4
    output 'B'

    bit.call func4

    output 'G'
    bit.pop_res x4
    output 'H'
    bit.bin2ascii ascii, x4
    output '-'
    bit.print ascii

    output '\n'
    ;test5

func4:
    output 'C'
    bit.get_sp __func4_arg_ptr
    output 'D'
    bit.dec_ptr __func4_arg_ptr
    output 'E'
    bit.ptr_flip_dbit __func4_arg_ptr
    output 'F'
    bit.return
  __func4_arg_ptr:
    bit.vec w, 0



// Prints "ABC abcdefg ABCD-", and then 0/1, the xor of x5,y5
test5:
    output 'A'
    bit.push res5
    output 'B'
    bit.push x5
    output 'C'
    bit.push y5

    output ' '
    bit.call func5
    output ' '

    output 'A'
    bit.pop y5
    output 'B'
    bit.pop x5
    output 'C'
    bit.pop_res res5
    output 'D'

    bit.bin2ascii ascii, res5
    output '-'
    bit.print ascii

    output '\n'
    loop

// res = arg0 xor arg1
func5:
    bit.zero __func5_res
    bit.get_sp __func5_arg_ptr
    output 'a'

    bit.dec_ptr __func5_arg_ptr
    output 'b'
    bit.xor_from_ptr __func5_res, __func5_arg_ptr
    output 'c'
    bit.dec_ptr __func5_arg_ptr
    output 'd'
    bit.xor_from_ptr __func5_res, __func5_arg_ptr
    output 'e'

    bit.dec_ptr __func5_arg_ptr
    output 'f'
    bit.xor_to_ptr __func5_arg_ptr, __func5_res
    output 'g'

    bit.return
  __func5_res:
    bit
  __func5_arg_ptr:
    bit.vec w



  x3:
    bit 0

  x4:
    bit 0

  x5:
    bit 1
  y5:
    bit 1
  res5:
    bit 0


  ascii:
    bit.vec 8

    bit.ptr_init
    bit.stack 10
