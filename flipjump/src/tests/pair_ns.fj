ns Pair {
    first = 0
    len = w
    second = .len*dw
    size = .len * 2

    def init this {
        bit.zero .len,  this+.first
        bit.zero .len, this+.second
    }

    def add_first  this, val {
        ._.add this+.first,  val
    }

    def add_second this, val {
        ._.add this+.second, val
    }

    def add this, src {
        .add_first  this, src+.first
        .add_second this, src+.second
    }

    def print this {
        output '('
        ._.print_hex_int this+.first
        output ','
        output ' '
        ._.print_hex_int this+.second
        output ')'
    }

    def init {
        ._.init
    }

    ns _ {
        def add dst, src < .add, .ret_reg, .temp1, .temp2 {
            bit.xor ..len, .temp2, src
            bit.xor_zero ..len, .temp1, dst
            fcall .add, .ret_reg
            bit.xor_zero ..len, dst, .temp1
            bit.zero ..len, .temp2
        }


        def print_hex_int val < .print_hex_int, .ret_reg, .temp1 {
            bit.xor ..len, .temp1, val
            fcall .print_hex_int, .ret_reg
            bit.xor ..len, .temp1, val
        }

        def init @ data_end > add, print_hex_int, ret_reg, temp1, temp2 {
            ;data_end

            add:
                bit.add ..len, .temp1, .temp2
                fret .ret_reg

            print_hex_int:
                bit.print_hex_int ..len, .temp1, 1
                fret .ret_reg

            ret_reg: bit 0
            temp1: bit.vec ..len, 0
            temp2: bit.vec ..len, 0

            data_end:
        }

    }

    def swap this {
        bit.swap .len, this+.first, this+.second
    }

    ns prints {
        def print_two p1, p2 {
            ..print p1
            output ','
            output ' '
            output ' '
            ..print p2
            output '\n'
        }
    }
}

startup

Pair.init

Pair.init p1
Pair.init p2

Pair.prints.print_two p1, p2

Pair.add_first  p1, v08
Pair.add_second p1, v02
Pair.prints.print_two p1, p2

Pair.add_first  p2, vAB
.Pair.add_second p2, vCC
Pair.prints.print_two p1, p2

Pair.add p1, p2
Pair.prints.print_two p1, p2

.Pair.add p2, p1
Pair.prints.print_two p1, p2

Pair.swap p1
Pair.print p1
output '\n'

loop

p1: bit.vec Pair.size
p2: bit.vec Pair.size

v08: .bit.vec w, 0x08
v02:  bit.vec w, 0x02
vAB: .bit.vec w, 0xAB
vCC:  bit.vec w, 0xCC
