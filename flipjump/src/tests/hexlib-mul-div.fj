start:
startup


// mul
output "mul:\n"
ADD_MUL_NUM = 0x3787e7d8c45c5eefb8a2cdd909a9e73210d24441f7c8b13aad24166b69780a672ee724faecddc0fbf42163dd4ba0104c191fcbf934fb8b710e1653d28cf6ef0ade0ecc43805d14a15be12649efc47eb45f46906eeaae3b0660c4b978654076f20fcfbbbfb66e660668d4b10fa5584bd2c8743f9a39cdf8634a09a386c755f8deae1b1b560eaf4e07ce39f30c82a59d7d3112077516d1
//rep(100, i) test_add_mul (ADD_MUL_NUM>>(3*4*i+8))&0xf, (ADD_MUL_NUM>>(3*4*i+4))&0xf, (ADD_MUL_NUM>>(3*4*i))&0xf
rep(100, i) output '='
output '\n'
ADD_MUL_64_NUM = 0xf746c656ec44a883061102a194002cb7f236b436cfd35f291c4e52287d93571f2109d73d25af5f85769e7ab1c1a02ce27b9be8b6577c418a420ca8e10d1ce21eee41a8b0f3f47e1a71a776502d7b0dc8c105b9f577a02afe857fb0235be08f7b4f229c8a382e0f77f025ed9e8eb0fe20e855429737cc9a9586da81814bacadb911967eec2bbc1a1ae3f4c36f88b083c78b1aefd8ec266e2a29579cd1c4a7c505cd8a2532f95580bd810c82aac45cbbbd114639f8b1cc5df54508b9a633ef785589802d083e451e319abe491abd60f51242281d5273ac80272756797db773877bae6bce7f66b835bf8791895d4f730c5a3161eb7703e212b4294ae4acb955883e28de343c314d8884a4e2150c9ec61c907dcb3d93b02e3abed11b82847c854243dc6268ed83fd1e79cd53dd98a5a13f4444f7f9255c21e1e44c8d32b447f7de23df0026601ea1f96caf696434a17f2970b39c044e926e4bf5de735f80f4d4d193520beee647d560031bd114a604040ea9c9ec783abf87812e0fa17555ab43e05806fbcaa5634a3f29cc05d4f41ba0959d779ee6a2b94392dbdade04b7709570f59f3dadf915823175a4fd801b412cbe8842e3b5a52f68733746038df31e3a0afec93a5c581f1e92cbb1d3f0c4d5819dc9724d5dd2e1fdb68b419db2d9f4dcaedf0817f866b6a57e6c7b06ac3698952fa843e8a0cab0275d0e13e5f578a562491689ac73d38b30da550bcdebf02acf8f4a0c5eed955337336e1e0029c79092b4309eda7ddb16d043ac6aa8a5a9a3a228c3b908ad14cf2a60d1a5323e9d68f5efbae7c43a362be57f8634887a5b8ede3e72527e06fd20ed39f97f666a7c2933df4617176902453181bc5edec13ca451ee74d4f434c8dd01e9f4a11ad2f1944dd63b74c648305ebc95e25b03789b8725132621d2d001fd079c0d1ed9b2044c8e3f52fa65566edbc726f0791b49a7117078955c925889294845a2b7c793f68e7e833593c2f60cf59f2b4a634733b392e7170a70853b4d6c398c107da1ce5613a03361142d7c213972cab3a92631c034cc2c620fb74286100736617003311b12c5792c60f8d5f9a58940acd42f8c541be45631f7fc70f9a23a0ca8c3adb1443fc035588709bbc83297f6a368788e6328d4f085bb0b301e11da115ac24523f8232cf2b91fb8d78d3b98f9453cbff751f6148b7de63198648de8c7857fa98853d53f11138c4d327a6a53c2cf6c1554c7005e3ad52aed8eeb4bd0cd2af9b3770313a4d12c350eaa2cff67cc2951f4064fcf54ba3f5fa9c2e45543a64a591a34199f2ed80ca59446860fca6fa6335cf01c7c9cc5d719eb45bdf771007e5a5f34d4e7aecbf682d8f70a1f2658580cbc0bb1edd6b8c7098447d1d0e0e1c1ef53523c8722f9a78d9fdea511ebc935e518a0c40dced8f165ef96ad6ac1f2046152ea1932a70a10d3789eef64ded47da94d3726e9616564e522aaa16182af62807c7c97de481b3fe374d7183b9823b74412f0e4a312e6f5d3bac6d315caf52ab41a026234d04d3d190576b8ddf3c76287479141e019ccdda140c36d5bacfcc8273c5993f8527587a3ff624be4ee4a271948470cb797231aa104bb790074cff31761f016bc6946838d4c9d312c920a69c2d5885d25ff237dfbc9a31cf41b75c681ad0348d37cf9e820442da8e1ba2a32bca08bc1deb388164579d99eda40faeac64ede15ed8dfe225183fe03f5ed518d459fd1d6fe6262b385962af779013bbff4bc20307cca4045ef760246a2d5b9cc9b788ded073172e7875dd6a6217043f503b42e97250a1aa5d44433f253752e1c2b1d338bc1c2ec42d2f62a12896ba28d08ecd1a67c7902c354d8c2f39f28f96fadc93e4fff2859cc241d60245b8fd3242e705d0c81d7e11124f1df87ff57c9017899abab7ac3a5bf65830b160d9555ab3d44dc38d427bce2fbcb457c5a836186de2920ac6b2cb1066e51c37e8c839be63fa49430d76a7282b957a200aff5e7cd5fd79546236be19455f7b16f43fdd672b1c65e2851c44232fce9b18ce2dd9eb6fd6d88bb03750dad2d2a7ad3ac4c39db10c4f1a8c385551269de99b53cdf04cd24f2077ee7a5e21615e38e90eab0ea2e66cc6ad52965157a7f0f4274f47ce81f3c68647c1142518e9264b7a175ffe5adbe1e02413049a3d4447ad08f28dcf67b3cd5850e709f67f6f82ea071f3a04c959d5c25f7bd5f1d7c3f1cb9cea9688af1550dbea94c9f6694137cdc7c4bcb79cdcd7f3b98f4d8c32d2a080dd2b124e2436c7ff70337e207c6916ef61b1592a4c30b5bafd2b52c996cbb691792059c63047c829e581b575b7162f7b749217733e57831f17d3ecee9301b5a7d6f399c28c946b070771f5250df01b962071380a32ef8156c624171eba854078c963fa87cd051c67e68709bf9cbf2f4513b89ddc36a062e00a3862732da4e5f385fb9dc978f377adeec1e4598dfd980423d55819bef8b319aa0198eb7a9343d2e3e92309bd1ea1757c074c3457a09897bc11c045842b1e0593d276cc4b0a000c89faa510462e441a0c9acd4e650672be2de11112264b306c4e3eee63573da11922c365a8b7d75f0b8addbbad956d452449123c90d24a773ff4d187f18f75bbd85b04a6c6473d044d7dd589c8dd3a220d757388143cbbd9542d3063a682e68898fb5935c915de056a156d34d198923a948f0838aa678a948b04e0e2c10193fe9348f184cad5d98c3e21461943fdf6c7ca406c6384c4dd0b1ed557b05425ffa1e5ff79411cccbdbc605ceda4b4ba6c118349a5a0013d05b2ca2f9e78565dced2be96650258cc700960f713977db16bf106b150fb775519d08f608fab92306c6b170554f47d6f42bf1f8486f9d31684493771b3aa6d43038f790352728383b65e6f9999a2b813f181b4d320005611988683b79aa0b916cca71259632c5678678ef2815ee04daa6de497a75bbbde002fe52cc688f7d5a528214699a63775544ecf7d8460f63ef6850906adac1d4453d088eb56549a36ad96fe6d3dd125821f868fd7773391f5b47b579040663b3a3627128c589ef07daf7052f0b7119bf9c773758693456885bf25523489cb94f6edefe6f303ca68aa1b71d856a5a23b949b89db4051e3d0e819d5413649ac57707450a9c6b1c552b7086d0d97e7a6afc78ef7567d2afe8181827233dd39ed739b6ac300dd4a782f6b38d3a627586fa6d4029d4ef3bee4de0d96529c44c49558c4f2f26bd1784fca4f9c1e58654b6d5246c63e803f80e25d7f8a1888e44c6682f5c468ce155d03ee97901262893db516213e95666e5de5c98193dc773aa18b003797b1a63ea5076308153eb88f5544d46d4c99d928e7256f517b4fa3625912f3ea82f09d3cd625f0426bef9237334d1955714
//rep(100, i) test_add_mul_64 (ADD_MUL_64_NUM>>((3*i+2)*64))&0xf, (ADD_MUL_64_NUM>>((3*i+1)*64))&0xf, (ADD_MUL_64_NUM>>((3*i)*64))&0xf
rep(100, i) output '='
output '\n'
MUL_NUM = 0xeff9afd3e398b0d9480e36c3d14cd6289b2042fa927030786e10e3078377a5e6c06b831c58e89ff13510f0f76f49bb44a8894cf670e676320ad8cec17d41b2763e28bd1c86d45633dedb228e1ce35c5000886f24c35cf8dc58a13818ca057c40e0471c46792b0f3cd9754e0a5d6cf4257d70f75835a56d75d8d6be13e0388f0f3e7f0efe0b6dfff1bde6e74b2f9097544b212fd77e0ea23486d9b37688dc518bd958302327d450e980ff6bf8c330250d4d38a56aa8d447add3ba947d8b50372efbfe0b688f1e693b02f667ae7dd7d3dc7ccbd78d1b170b361f80b2cd702750496de21c98ef8282cf27e014e22d236001ea346ccac2fd760d619c0c86bf2ce55509a780c7fce9bb5d87770724eb43e471989724c7aff112eec5dd184b20467942e8f78b51ff652ff216ba1efd0e0a42eece85864202c6f604ce898fbca66b5e989309b5c30a424a878c8f7a826f6ae8e50df64b548c086fbcc829178ab9440718be0a3c367631f19d933e2dfe966d35f58098bf4bcec254d48de67822157bf2ec93e98841172701565fc1e01e02d3bda981b22ede8f3068fd01085504f5b538727d88b72eecca5c479ac1454f73973457302720b1a8ff05c67b744e93432833839be8f4ebe558a703aa654e69e23581168f80f49de3f7713d4895f88ae593f1000f4e287efb383f4e1dba1ffde820edabf8589059d9b297290cc3a1e4d3cbc548e95a36808dd8113d25edf03e1e59abcd5c69e5ab14e5bc542061f04d69178ea7fd74e5208dd0e1fa1d3990097f8c50b6f16910008b72979c6068b5bf538fd4338cf50cd3cebf09f6fe42e2177700c7379dae6339c7347808c7ce44dabb5ab6c60dec9e7b37b88f01117dc3b40f5f1923fc5fc41b47a9614cc37dca81c1e5964271047ea0c2468b11e3653051ba153f2802b6441d8f9f5d4e07dcdf1dfc49d83a02a4b3ad0bcb55f62c4d825759509336e5ae2503a350eec5641f210681d76a4552e1ae32cf8dd1e2c1dd000f713a6ad98996528a9b21858623561004ecd77965e03665c0de5a3027d39a856796b3591d07bc3bf87ab126ef7d3a1080d8aafce1d28adc9bda23efa7c05915f4b8629dd1558f89d7f771d8f5589bd8e8193e0a5e
//rep(60, i) test_mul 4, mul4, (MUL_NUM>>(32*i))&((1<<16)-1), (MUL_NUM>>(32*i+16))&((1<<16)-1)
//rep(40, i) test_mul 8, mul8, (MUL_NUM>>(64*i))&((1<<32)-1), (MUL_NUM>>(64*i+32))&((1<<32)-1)
rep(100, i) output '='
output "\n\n"


// TODO - test div
output "div:\n"
   DIV_NUM = 0x2d37afdff3a29957b1600de68e1476244bb61d73c5233a86e48eb76cfcc5b96eb3b9f64728ae12f8b5694c6718ea7d241ae989003a098a80219fbb1290fa0d866a73564dfcbb62cbe1b91d1c96a0ba40f2b2577c0ca72c2a47b76e3596b67a2363de94a25a9dc66c44406fa8309fff20d5293fa9979d10644a6b3e4dd931970960a950ec082c22f5bfe37ce46d15420bc267bf3b99d34f2aa97cf4b32dd2d2684197f512168ddcd25128f6c7596434bd5bcbe4b389fe0c68b558d2ec17ccadceeb14c34fbd43d8134cefdd6e4b71a01e8815dd0407fa3016f5fb5ff7eca134d31b10fffceb498ff95868d70073ce41a6022eb7b985e8572754254e3f2687e75665266a4a02ced3746af81ef8f22da69914cc88f15c99716573520ce26f5562098eba7edc126a9921dbc0be9e964ae1c467fc9fca732c611cfde1c69dbc09114c34f244c919b8210d7b81e442f5a3281b88e3a212b9fdc5519dcacd972f759e8b6852893d12c5189d43394566284da3c2028eebefc54de104fe93c8a1c5dad73f6475a5f4d06aee2a19135d765bba7f6b3c193c4e7f372e306730ee36afffd2a65fd4b2ee54a4f8e02a3d799fe3ed063af2a4a560c67f7ea375988f42017761ad4e9558b980b4f688dea3927220710ec2a84f1e4aea64d6c48ce28a5b586aea03ed6651d05342b45b97cdfa8c94f9666fc44d05768506f81a926db02a2d803db1f3220433fb68afcba4e0370d110a9357d63164e5209e8286112190f0ce8e1622db3dcdcd332d544ff6f0b1af94ee0cc748cc74232d2ec310ac06ec8a4fceccc08ea9134904060a7b139ee46a679451379066e57bb72cc1e47ec34c3b741f2bd88c07632ad5c2b78a61703eb2d36f134eb9da5e8cbd1231f3233c075ab1f532a66ce50e09ba83ef8b3da5709daa80995dd7fc1a3d6fa4e1d5f3b1fd0cc04e416bf7f054483d9b4a25151b055ee829d52e4f70ec8b3e47320c0fb710280a8c8e2fb3a632c6f3911086c03091823317dd10bd218558b9139b0a2ad1ae75e50af9a666c4bf81557c173ab8a63877694c184d04ed78a925c430a8e0914062ce16ed80f53f09384f637f5769eb3f468b9e894a413eb634760171b84e7a161240b36512
DIV_B1_NUM = 0xa67d738774eae443169a4a82e86cf9a4b11bbe95147f43b51db9845c8f435cc5491faa6ee3a48591824833862496342dead6
DIV_B2_NUM = 0x6e287f9d6d301a1d335442d41a1aed5cd0c66a3f69321d412d7b2ad5b09de6c0fb101010c955ce7e30bac0bfe684638ed24f4582ec2b69e7c84f4b092a81752f13cc9b6ca561add4f38bc59b552cbf7a4f423987ee8b4451169fc013c316595ed102
DIV_B4_NUM = 0x35693c547f39bb78985939825165f49cd015a98a814eda69bd762e66e44f4f44915bc2df73f3a9a41ba3b82ea2d62a85ed4b9be039927eebfe932c86780fa3fa06477bec7b21a6ba527704eda18333a1da94a4dee4ab0865ba05e5bc78b11612b10f66b6128ea96ec120fc12ed6c64b1fc78387147e286347de4352f800e14b48be2acdbf0e1ee6153bcd5da831b5f975d693ffe911114a5a7a16867c87d55ecb6135e9fc0cff7683c99c66d970cf1b93d68a95f843714c809b6d131c9392cf79988461cd
DIV_B8_NUM = 0x70b06b1281c825b68a90ebb74db2e604b7af1091374ea71f9700d06c69cc9f4528e0ce8cb927b9a6c38191bfe3ba2a7a846ab232a6f1bed5cce422495ffd7293d95bcdb3cca6b36912fe1ef9280de585b5b43dfffcf6a6e2e8589a9247bc9a61da78c73dc9f7720e2a5139dcb2d5294a9b816a90cfcac7688bf64f7e0e5e7f81bbf1eb9618da9d74e192e5796b2fff35b2f08fcb69522a01af6a7f4a1466719c9eb0650bc61294a7331a18952b59d9b6f7d1c68bd30962fed55cf6e396610666ab80f1404e9c6695721a69d5e9a3d60b9b0ec0e38d0663006f03e1a2cac891db7b749179001ee03f23999a53f6d3f5c00665a8e64e565ba972dab0d7ca848e56c7722707204421e8f622de3d3ec901dc3f510f7f43c5da7b364521da3e1ece71de150a8c5483c5ba0ddbb4cd31e3376145673113bd4c500a4838367dcb5955b5b0f377e0574fd6d668849b2c5944e5bc6ae6c23776be9cd85fdad7dd60ebed860daec0ab316b6e704c944548b1e48a3c9dfb8437cdf48184ca18c847e4abe2b19381ce80323483280ccd7ca2e
rep(50, i) test_div 4, 1, div4_1, (DIV_NUM>>(16*i+0))&((1<<16)-1), (DIV_B1_NUM>>( 4*i))&((1<< 4)-1)
output '\n'
rep(30, i) test_div 4, 2, div4_2, (DIV_NUM>>(16*i+1))&((1<<16)-1), (DIV_B2_NUM>>( 8*i))&((1<< 8)-1)
output '\n'
rep(20, i) test_div 4, 4, div4_4, (DIV_NUM>>(16*i+2))&((1<<16)-1), (DIV_B4_NUM>>(16*i))&((1<<16)-1)
//rep(100, i) output '='
output "\n\n"
rep(40, i) test_div 8, 1, div8_1, (DIV_NUM>>(64*i+3))&((1<<32)-1), (DIV_B1_NUM>>( 4*i + 50* 4))&((1<< 4)-1)
output '\n'
rep(30, i) test_div 8, 2, div8_2, (DIV_NUM>>(64*i+4))&((1<<32)-1), (DIV_B2_NUM>>( 8*i + 50* 8))&((1<< 8)-1)
output '\n'
rep(20, i) test_div 8, 4, div8_4, (DIV_NUM>>(64*i+5))&((1<<32)-1), (DIV_B4_NUM>>(16*i + 50*16))&((1<<16)-1)
output '\n'
rep(10, i) test_div 8, 8, div8_8, (DIV_NUM>>(64*i+6))&((1<<32)-1), (DIV_B8_NUM>>(32*i + 50*32))&((1<<32)-1)
//rep(100, i) output '='
output "\n\n"


loop
hex.init


ah:  hex.vec 16
bh:  hex.vec 16
res: hex.vec 16
ch:  hex.vec 16
mod: hex.vec 16
mh:  hex.vec 16


ret: ;0

zero_all_4:
    hex.zero 16, ah
    hex.zero 16, bh
    hex.zero 16, ch
    hex.zero 16, res
    fret ret

mul4:
    hex.mul 4, res, ah, bh
    fret ret

mul8:
    hex.mul 8, res, ah, bh
    fret ret

add_mul:
    hex.mul.clear_carry
    hex.xor hex.mul.dst, bh
    hex.add_mul res, ah
    hex.xor hex.mul.dst, bh
    hex.mul.clear_carry
    fret ret

add_mul_64:
    hex.add_mul 16, res, ah, bh
    fret ret

lt_print:
    output '\n'
    hex.print_uint 16, ah, 1, 0
    output '*'
    hex.print_uint 16, bh, 1, 0
    output '='
    hex.print_uint 16, res, 1, 0
    output '<'
    hex.print_uint 16, ch, 1, 0
    output '\n'
    fret ret

gt_print:
    output '\n'
    hex.print_uint 16, ah, 1, 0
    output '*'
    hex.print_uint 16, bh, 1, 0
    output '='
    hex.print_uint 16, res, 1, 0
    output '>'
    hex.print_uint 16, ch, 1, 0
    output '\n'
    fret ret

add_mul_lt_print:
    output '\n'
    output "old_res+"
    hex.print_uint 16, ah, 1, 0
    output '*'
    hex.print_uint 16, bh, 1, 0
    output '='
    hex.print_uint 16, res, 1, 0
    output '<'
    hex.print_uint 16, ch, 1, 0
    output '\n'
    fret ret

add_mul_gt_print:
    output '\n'
    output "old_res+"
    hex.print_uint 16, ah, 1, 0
    output '*'
    hex.print_uint 16, bh, 1, 0
    output '='
    hex.print_uint 16, res, 1, 0
    output '>'
    hex.print_uint 16, ch, 1, 0
    output '\n'
    fret ret

div4_1:
    hex.div 4, 1, res, mod, ah, bh, div0
    fret ret

div4_2:
    hex.div 4, 2, res, mod, ah, bh, div0
    fret ret

div4_4:
    hex.div 4, 4, res, mod, ah, bh, div0
    fret ret

div8_1:
    hex.div 8, 1, res, mod, ah, bh, div0
    fret ret

div8_2:
    hex.div 8, 2, res, mod, ah, bh, div0
    fret ret

div8_4:
    hex.div 8, 4, res, mod, ah, bh, div0
    fret ret

div8_8:
    hex.div 8, 8, res, mod, ah, bh, div0
    fret ret

div0:
    output "0"
    fret ret

neq_div_print:
    output '\n'
    hex.print_uint 16, ah, 1, 0
    output " / "
    hex.print_uint 16, bh, 1, 0
    output " = "
    hex.print_uint 16, res, 1, 0
    output "  !=  "
    hex.print_uint 16, ch, 1, 0
    output '\n'
    fret ret

neq_mod_print:
    output '\n'
    hex.print_uint 16, ah, 1, 0
    output " % "
    hex.print_uint 16, bh, 1, 0
    output " = "
    hex.print_uint 16, mod, 1, 0
    output "  !=  "
    hex.print_uint 16, mh, 1, 0
    output '\n'
    fret ret


def test_add_mul r, a, b @ lt, eq, gt,  end < ah, bh, res, ch, ret, add_mul_lt_print, add_mul_gt_print, add_mul {
    hex.set ah,  a
    hex.set bh,  b
    hex.set res, r
    hex.set ch, (r+a*b)&0xf
    fcall add_mul, ret
    hex.cmp res, ch, lt, eq, gt

  lt:
    fcall add_mul_lt_print, ret
    ;end
  eq:
    output '='
    ;end
  gt:
    fcall add_mul_gt_print, ret
    ;end
  end:
}

def test_add_mul_64 r, a, b @ lt, eq, gt,  end < ah, bh, res, ch, ret, add_mul_lt_print, add_mul_gt_print, add_mul_64, zero_all_4 {
    fcall zero_all_4, ret
    hex.xor_by 16, ah,  a
    hex.xor_by 16, bh,  b
    hex.xor_by 16, res, r
    hex.xor_by 16, ch, (r+a*b)&((1<<64)-1)
    fcall add_mul_64, ret
    hex.cmp 16, res, ch, lt, eq, gt

  lt:
    fcall add_mul_lt_print, ret
    ;end
  eq:
    output '='
    ;end
  gt:
    fcall add_mul_gt_print, ret
    ;end
  end:
}

def test_mul n, mul_label, a, b @ lt, eq, gt,  end < ah, bh, res, ch, ret, lt_print, gt_print {
    hex.set n, ah, a
    hex.set n, bh, b
    hex.set n, ch, (a*b)&((1<<(4*n))-1)
    fcall mul_label, ret
    hex.cmp n, res, ch, lt, eq, gt

  lt:
    fcall lt_print, ret
    ;end
  eq:
    output '='
    ;end
  gt:
    fcall gt_print, ret
    ;end
  end:
}


def test_div n, nb, div_label, a, b @ neq_div, eq_div,  cmp_mod,  neq_mod, eq_mod,  end < ah, bh, res, ch,  mod, mh,  ret,  neq_div_print, neq_mod_print {
    hex.set   n, ah, a
    hex.zero nb, bh
    fcall div_label, ret
    hex.set  nb, bh, b
    hex.set   n, ch, (a/b)&((1<<(4*n ))-1)
    hex.set  nb, mh, (a%b)&((1<<(4*nb))-1)
    fcall div_label, ret

    hex.cmp  n, res, ch, neq_div, eq_div, neq_div

  neq_div:
    fcall neq_div_print, ret
    ;cmp_mod
  eq_div:
    output '='
    ;cmp_mod

  cmp_mod:
    hex.cmp nb, mod, mh, neq_mod, eq_mod, neq_mod

  neq_mod:
    fcall neq_mod_print, ret
    ;end
  eq_mod:
    output '='
    ;end

  end:
}
